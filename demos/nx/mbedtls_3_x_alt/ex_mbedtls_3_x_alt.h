/*
 * Copyright 2025 NXP
 * All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

/* ************************************************************************** */
/* Includes                                                                   */
/* ************************************************************************** */

#include <nxLog_msg.h>
#include <string.h>

/* ************************************************************************** */
/* Local Defines                                                              */
/* ************************************************************************** */

/* ************************************************************************** */
/* Structures and Typedefs                                                    */
/* ************************************************************************** */

/* ************************************************************************** */
/* Global Variables                                                           */
/* ************************************************************************** */

/* ************************************************************************** */
/* Static function declarations                                               */
/* ************************************************************************** */

/* clang-format off */

/* prime256v1 */
const uint8_t nist256_privatekeyData[] = {
    0x78, 0xE5, 0x20, 0x6A, 0x08, 0xED, 0xD2, 0x52,
    0x36, 0x33, 0x8A, 0x24, 0x84, 0xE4, 0x2F, 0x1F,
    0x7D, 0x1F, 0x6D, 0x94, 0x37, 0xA9, 0x95, 0x86,
    0xDA, 0xFC, 0xD2, 0x23, 0x6F, 0xA2, 0x87, 0x35,
};
const size_t nist256_privatekeyData_len = sizeof(nist256_privatekeyData);

const uint8_t nist256_keyPairData[] = {
    0x30, 0x81, 0x87, 0x02, 0x01, 0x00, 0x30, 0x13,
    0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02,
    0x01, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D,
    0x03, 0x01, 0x07, 0x04, 0x6D, 0x30, 0x6B, 0x02,
    0x01, 0x01, 0x04, 0x20, 0x78, 0xE5, 0x20, 0x6A,
    0x08, 0xED, 0xD2, 0x52, 0x36, 0x33, 0x8A, 0x24,
    0x84, 0xE4, 0x2F, 0x1F, 0x7D, 0x1F, 0x6D, 0x94,
    0x37, 0xA9, 0x95, 0x86, 0xDA, 0xFC, 0xD2, 0x23,
    0x6F, 0xA2, 0x87, 0x35, 0xA1, 0x44, 0x03, 0x42,
    0x00, 0x04, 0xED, 0xA7, 0xE9, 0x0B, 0xF9, 0x20,
    0xCF, 0xFB, 0x9D, 0xF6, 0xDB, 0xCE, 0xF7, 0x20,
    0xE1, 0x23, 0x8B, 0x3C, 0xEE, 0x84, 0x86, 0xD2,
    0x50, 0xE4, 0xDF, 0x30, 0x11, 0x50, 0x1A, 0x15,
    0x08, 0xA6, 0x2E, 0xD7, 0x49, 0x52, 0x78, 0x63,
    0x6E, 0x61, 0xE8, 0x5F, 0xED, 0xB0, 0x6D, 0x87,
    0x92, 0x0A, 0x04, 0x19, 0x14, 0xFE, 0x76, 0x63,
    0x55, 0xDF, 0xBD, 0x68, 0x61, 0x59, 0x31, 0x8E,
    0x68, 0x7C };
const size_t nist256_keyPairData_len = sizeof(nist256_keyPairData);

/* Ref key - id - 0x00000002 */
const uint8_t nist256_keyPair_refKey[] = {
    0x30, 0x81, 0x87, 0x02, 0x01, 0x00, 0x30, 0x13,
    0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02,
    0x01, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D,
    0x03, 0x01, 0x07, 0x04, 0x6D, 0x30, 0x6B, 0x02,
    0x01, 0x01, 0x04, 0x20,
    0x10, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x02, 0xA5, 0xA6, 0xB5, 0xB6, 0xA5, 0xA6,
    0xB5, 0xB6, 0x00, 0x00,
    0xA1, 0x44, 0x03, 0x42,
    0x00, 0x04, 0xED, 0xA7, 0xE9, 0x0B, 0xF9, 0x20,
    0xCF, 0xFB, 0x9D, 0xF6, 0xDB, 0xCE, 0xF7, 0x20,
    0xE1, 0x23, 0x8B, 0x3C, 0xEE, 0x84, 0x86, 0xD2,
    0x50, 0xE4, 0xDF, 0x30, 0x11, 0x50, 0x1A, 0x15,
    0x08, 0xA6, 0x2E, 0xD7, 0x49, 0x52, 0x78, 0x63,
    0x6E, 0x61, 0xE8, 0x5F, 0xED, 0xB0, 0x6D, 0x87,
    0x92, 0x0A, 0x04, 0x19, 0x14, 0xFE, 0x76, 0x63,
    0x55, 0xDF, 0xBD, 0x68, 0x61, 0x59, 0x31, 0x8E,
    0x68, 0x7C };
const size_t nist256_keyPair_refKey_len = sizeof(nist256_keyPair_refKey);

const uint8_t nist256_PubKey[] = {
    0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2A, 0x86,
    0x48, 0xCE, 0x3D, 0x02, 0x01, 0x06, 0x08, 0x2A,
    0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0xED, 0xA7, 0xE9, 0x0B, 0xF9,
    0x20, 0xCF, 0xFB, 0x9D, 0xF6, 0xDB, 0xCE, 0xF7,
    0x20, 0xE1, 0x23, 0x8B, 0x3C, 0xEE, 0x84, 0x86,
    0xD2, 0x50, 0xE4, 0xDF, 0x30, 0x11, 0x50, 0x1A,
    0x15, 0x08, 0xA6, 0x2E, 0xD7, 0x49, 0x52, 0x78,
    0x63, 0x6E, 0x61, 0xE8, 0x5F, 0xED, 0xB0, 0x6D,
    0x87, 0x92, 0x0A, 0x04, 0x19, 0x14, 0xFE, 0x76,
    0x63, 0x55, 0xDF, 0xBD, 0x68, 0x61, 0x59, 0x31,
    0x8E, 0x68, 0x7C
};
const size_t nist256_PubKey_len = sizeof(nist256_PubKey);





/* brainpoolP256r1 private key*/
const uint8_t bp256r1PrivateKeyData[] = {
    \
    0x77, 0x32, 0xF6, 0xE5, 0x98, 0x06, 0xC8, 0x66,
    0xED, 0x68, 0x9E, 0x80, 0x47, 0x64, 0xED, 0x3E,
    0xC9, 0x96, 0xCF, 0x1D, 0xCD, 0x36, 0xBC, 0xDA,
    0xC7, 0x4D, 0x7E, 0x66, 0x66, 0x8C, 0x39, 0x3B,
};
const size_t bp256r1PrivateKeyData_len = sizeof(bp256r1PrivateKeyData);

/* brainpoolP256r1 */
const uint8_t bp256r1keyPairData[] = {
    \
    0x30, 0x78, 0x02, 0x01, 0x01, 0x04, 0x20, 0x77,
    0x32, 0xF6, 0xE5, 0x98, 0x06, 0xC8, 0x66, 0xED,
    0x68, 0x9E, 0x80, 0x47, 0x64, 0xED, 0x3E, 0xC9,
    0x96, 0xCF, 0x1D, 0xCD, 0x36, 0xBC, 0xDA, 0xC7,
    0x4D, 0x7E, 0x66, 0x66, 0x8C, 0x39, 0x3B, 0xA0,
    0x0B, 0x06, 0x09, 0x2B, 0x24, 0x03, 0x03, 0x02,
    0x08, 0x01, 0x01, 0x07, 0xA1, 0x44, 0x03, 0x42,
    0x00, 0x04, 0x1D, 0x31, 0xD2, 0x70, 0x56, 0x0F,
    0xA9, 0xEC, 0x38, 0x81, 0x5F, 0xB4, 0x18, 0x97,
    0xD9, 0xBC, 0x4C, 0xA5, 0xEA, 0x80, 0x21, 0xEE,
    0x58, 0xE4, 0xD3, 0x91, 0x5C, 0x7A, 0xF6, 0xBD,
    0xA7, 0x67, 0x67, 0x52, 0xD6, 0x50, 0x12, 0xAE,
    0xDC, 0x3E, 0xC7, 0xE5, 0xE4, 0x7A, 0x33, 0xA0,
    0xB7, 0x89, 0xF8, 0x50, 0x02, 0x19, 0x17, 0xCC,
    0x0F, 0xDF, 0x9F, 0xAB, 0xC3, 0x58, 0xFE, 0x21,
    0x17, 0x7D,
};
const size_t bp256r1keyPairData_len = sizeof(bp256r1keyPairData);

const uint8_t bp256r1keyPairData_refKey[] = {
    \
    0x30, 0x78, 0x02, 0x01, 0x01, 0x04, 0x20, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x02, 0xA5, 0xA6, 0xB5,
    0xB6, 0xA5, 0xA6, 0xB5, 0xB6, 0x10, 0x00, 0xA0,
    0x0B, 0x06, 0x09, 0x2B, 0x24, 0x03, 0x03, 0x02,
    0x08, 0x01, 0x01, 0x07, 0xA1, 0x44, 0x03, 0x42,
    0x00, 0x04, 0x1D, 0x31, 0xD2, 0x70, 0x56, 0x0F,
    0xA9, 0xEC, 0x38, 0x81, 0x5F, 0xB4, 0x18, 0x97,
    0xD9, 0xBC, 0x4C, 0xA5, 0xEA, 0x80, 0x21, 0xEE,
    0x58, 0xE4, 0xD3, 0x91, 0x5C, 0x7A, 0xF6, 0xBD,
    0xA7, 0x67, 0x67, 0x52, 0xD6, 0x50, 0x12, 0xAE,
    0xDC, 0x3E, 0xC7, 0xE5, 0xE4, 0x7A, 0x33, 0xA0,
    0xB7, 0x89, 0xF8, 0x50, 0x02, 0x19, 0x17, 0xCC,
    0x0F, 0xDF, 0x9F, 0xAB, 0xC3, 0x58, 0xFE, 0x21,
    0x17, 0x7D,
};
const size_t bp256r1keyPairData_refKey_len = sizeof(bp256r1keyPairData_refKey);

const uint8_t bp256r1extPubKeyData[] = {
    0x30, 0x5A, 0x30, 0x14, 0x06, 0x07, 0x2A, 0x86,
    0x48, 0xCE, 0x3D, 0x02, 0x01, 0x06, 0x09, 0x2B,
    0x24, 0x03, 0x03, 0x02, 0x08, 0x01, 0x01, 0x07,
    0x03, 0x42, 0x00, 0x04, 0x1D, 0x31, 0xD2, 0x70,
    0x56, 0x0F, 0xA9, 0xEC, 0x38, 0x81, 0x5F, 0xB4,
    0x18, 0x97, 0xD9, 0xBC, 0x4C, 0xA5, 0xEA, 0x80,
    0x21, 0xEE, 0x58, 0xE4, 0xD3, 0x91, 0x5C, 0x7A,
    0xF6, 0xBD, 0xA7, 0x67, 0x67, 0x52, 0xD6, 0x50,
    0x12, 0xAE, 0xDC, 0x3E, 0xC7, 0xE5, 0xE4, 0x7A,
    0x33, 0xA0, 0xB7, 0x89, 0xF8, 0x50, 0x02, 0x19,
    0x17, 0xCC, 0x0F, 0xDF, 0x9F, 0xAB, 0xC3, 0x58,
    0xFE, 0x21, 0x17, 0x7D,
};
const size_t bp256r1extPubKeyData_len = sizeof(bp256r1extPubKeyData);

/* clang-format on */
